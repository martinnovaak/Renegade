#pragma once
#include <vector>
#include <string>

// To do: add squares, files, and ranks

namespace MoveFlag {
	static const int ShortCastle = 1;
	static const int LongCastle = 2;
	static const int PromotionToKnight = 3;
	static const int PromotionToBishop = 4;
	static const int PromotionToRook = 5;
	static const int PromotionToQueen = 6;
	static const int EnPassant = 7;
}

namespace Turn {
	static const bool White = true;
	static const bool Black = false;
}

namespace PieceColor {
	static const int None = 0;
	static const int White = 1;
	static const int Black = 2;
}

namespace PieceType {
	static const int None = 0;
	static const int Pawn = 1;
	static const int Knight = 2;
	static const int Bishop = 3;
	static const int Rook = 4;
	static const int Queen = 5;
	static const int King = 6;
}

namespace Piece {
	static const int WhitePieceOffset = 0;
	static const int BlackPieceOffset = 7;
	static const int None = 0;
	static const int WhitePawn = WhitePieceOffset + PieceType::Pawn;
	static const int WhiteKnight = WhitePieceOffset + PieceType::Knight;
	static const int WhiteBishop = WhitePieceOffset + PieceType::Bishop;
	static const int WhiteRook = WhitePieceOffset + PieceType::Rook;
	static const int WhiteQueen = WhitePieceOffset + PieceType::Queen;
	static const int WhiteKing = WhitePieceOffset + PieceType::King;
	static const int BlackPawn = BlackPieceOffset + PieceType::Pawn;
	static const int BlackKnight = BlackPieceOffset + PieceType::Knight;
	static const int BlackBishop = BlackPieceOffset + PieceType::Bishop;
	static const int BlackRook = BlackPieceOffset + PieceType::Rook;
	static const int BlackQueen = BlackPieceOffset + PieceType::Queen;
	static const int BlackKing = BlackPieceOffset + PieceType::King;
}

static const __int64 LightSquares = 0b0101010101010101010101010101010101010101010101010101010101010101;
static const __int64 DarkSquares = 0b1010101010101010101010101010101010101010101010101010101010101010;

enum class GameState { Playing, WhiteVictory, BlackVictory, Draw };

static std::string StateString(GameState s) {
	if (s == GameState::Playing) return "Playing";
	if (s == GameState::WhiteVictory) return "WhiteVictory";
	if (s == GameState::BlackVictory) return "BlackVictory";
	if (s == GameState::Draw) return "Draw";
}

static const std::string starting_fen = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";


static void SetBitTrue(__int64& number, __int64 place) {
	number |= 1ULL << place;
}
static void SetBitTrue(unsigned __int64& number, __int64 place) {
	number |= 1ULL << place;
}

static void SetBitFalse(__int64& number, __int64 place) {
	number &= ~(1ULL << place);
}

static bool CheckBit(__int64& number, __int64 place) {
	return (number >> place) & 1ULL;
}



// https://stackoverflow.com/questions/4244274/how-do-i-count-the-number-of-zero-bits-in-an-integer
static int NonZeros(__int64 number) {
	size_t zeros = 0;
	for (size_t i = 0; i < CHAR_BIT * sizeof number; ++i) {
		if ((number & (1ULL << i)) == 0)
			++zeros;
	}
	return CHAR_BIT * sizeof number - zeros;
}


// https://stackoverflow.com/questions/25829143/trim-whitespace-from-a-string
static std::string trimstr(const std::string &str) {
	size_t first = str.find_first_not_of(' ');
	if (first == std::string::npos) return "";
	if (std::string::npos == first) return str;
	size_t last = str.find_last_not_of(' ');
	return str.substr(first, (last - first + 1));
}

// https://stackoverflow.com/questions/8095088/how-to-check-string-start-in-c
static bool startsWith(std::string big, std::string small) {
	return big.compare(0, small.length(), small) == 0;
}


// 0: 1st rank ... 7: 8th rank
static int GetSquareRank(int square) {
	return square / 8;
}

// 0: A ... 7: H
static int GetSquareFile(int square) {
	return square % 8;
}

// 0: None, 1: White, 2: Black
static int ColorOfPiece(int piece) {
	if (piece == 0) return PieceColor::None;
	if ((piece > 0) && (piece < 7)) return PieceColor::White;
	return PieceColor::Black;
}

static int TypeOfPiece(int piece) {
	return piece % 7;
}

static int TurnToPieceColor(bool turn) {
	if (turn == Turn::White) return PieceColor::White;
	return PieceColor::Black;
}

static int Square(int rank, int file) {
	return rank * 8 + file;
}

static int SquareToNum(std::string sq) {
	int file = sq[0] - 'a';
	int rank = sq[1] - '1';
	return Square(rank, file);
}



const std::vector<std::vector<int>> KnightMoves = { {10,17}, {11,16,18}, {8,12,17,19}, {9,13,18,20}, {10,14,19,21}, {11,15,20,22}, {12,21,23}, {13,22}, {2,18,25}, {3,19,24,26}, {0,4,16,20,25,27}, {1,5,17,21,26,28}, {2,6,18,22,27,29}, {3,7,19,23,28,30}, {4,20,29,31}, {5,21,30}, {1,10,26,33}, {0,2,11,27,32,34}, {1,3,8,12,24,28,33,35}, {2,4,9,13,25,29,34,36}, {3,5,10,14,26,30,35,37}, {4,6,11,15,27,31,36,38}, {5,7,12,28,37,39}, {6,13,29,38}, {9,18,34,41}, {8,10,19,35,40,42}, {9,11,16,20,32,36,41,43}, {10,12,17,21,33,37,42,44}, {11,13,18,22,34,38,43,45}, {12,14,19,23,35,39,44,46}, {13,15,20,36,45,47}, {14,21,37,46}, {17,26,42,49}, {16,18,27,43,48,50}, {17,19,24,28,40,44,49,51}, {18,20,25,29,41,45,50,52}, {19,21,26,30,42,46,51,53}, {20,22,27,31,43,47,52,54}, {21,23,28,44,53,55}, {22,29,45,54}, {25,34,50,57}, {24,26,35,51,56,58}, {25,27,32,36,48,52,57,59}, {26,28,33,37,49,53,58,60}, {27,29,34,38,50,54,59,61}, {28,30,35,39,51,55,60,62}, {29,31,36,52,61,63}, {30,37,53,62}, {33,42,58}, {32,34,43,59}, {33,35,40,44,56,60}, {34,36,41,45,57,61}, {35,37,42,46,58,62}, {36,38,43,47,59,63}, {37,39,44,60}, {38,45,61}, {41,50}, {40,42,51}, {41,43,48,52}, {42,44,49,53}, {43,45,50,54}, {44,46,51,55}, {45,47,52}, {46,53} };

const std::vector<std::vector<int>> BishopMoves = { {9,18,27,36,45,54}, {1,17,26,35,44,53,62}, {2,9,25,34,43,52,61}, {3,10,17,33,42,51,60}, {4,11,18,25,41,50,59}, {5,12,19,26,33,49,58}, {6,13,20,27,34,41,57}, {14,21,28,35,42,49}, {8,10,19,28,37,46,55}, {0,2,16,18,27,36,45,54,63}, {3,8,10,24,26,35,44,53,62}, {4,11,16,18,32,34,43,52,61}, {5,12,19,24,26,40,42,51,60}, {6,13,20,27,32,34,48,50,59}, {7,14,21,28,35,40,42,56,58}, {15,22,29,36,43,48,50}, {9,11,16,20,29,38,47}, {1,3,17,19,24,28,37,46,55}, {0,4,9,11,25,27,32,36,45,54,63}, {5,8,12,17,19,33,35,40,44,53,62}, {6,13,16,20,25,27,41,43,48,52,61}, {7,14,21,24,28,33,35,49,51,56,60}, {15,22,29,32,36,41,43,57,59}, {23,30,37,40,44,49,51}, {10,12,17,21,24,30,39}, {2,4,18,20,25,29,32,38,47}, {1,5,10,12,26,28,33,37,40,46,55}, {0,6,9,13,18,20,34,36,41,45,48,54,63}, {7,8,14,17,21,26,28,42,44,49,53,56,62}, {15,16,22,25,29,34,36,50,52,57,61}, {23,24,30,33,37,42,44,58,60}, {31,32,38,41,45,50,52}, {11,13,18,22,25,31,32}, {3,5,19,21,26,30,33,39,40}, {2,6,11,13,27,29,34,38,41,47,48}, {1,7,10,14,19,21,35,37,42,46,49,55,56}, {0,9,15,18,22,27,29,43,45,50,54,57,63}, {8,17,23,26,30,35,37,51,53,58,62}, {16,25,31,34,38,43,45,59,61}, {24,33,39,42,46,51,53}, {12,14,19,23,26,33,40}, {4,6,20,22,27,31,34,41,48}, {3,7,12,14,28,30,35,39,42,49,56}, {2,11,15,20,22,36,38,43,47,50,57}, {1,10,19,23,28,30,44,46,51,55,58}, {0,9,18,27,31,36,38,52,54,59,63}, {8,17,26,35,39,44,46,60,62}, {16,25,34,43,47,52,54}, {13,15,20,27,34,41,48}, {5,7,21,23,28,35,42,49,56}, {4,13,15,29,31,36,43,50,57}, {3,12,21,23,37,39,44,51,58}, {2,11,20,29,31,45,47,52,59}, {1,10,19,28,37,39,53,55,60}, {0,9,18,27,36,45,47,61,63}, {8,17,26,35,44,53,55}, {14,21,28,35,42,49}, {6,22,29,36,43,50,57}, {5,14,30,37,44,51,58}, {4,13,22,38,45,52,59}, {3,12,21,30,46,53,60}, {2,11,20,29,38,54,61}, {1,10,19,28,37,46,62}, {9,18,27,36,45,54} };

const std::vector<std::vector<int>> RookMoves = { {1,2,3,4,5,6,7,8,16,24,32,40,48,56}, {0,9,10,11,12,13,14,15,16,24,32,40,48,56}, {0,8,17,18,19,20,21,22,23,24,32,40,48,56}, {0,8,16,25,26,27,28,29,30,31,32,40,48,56}, {0,8,16,24,33,34,35,36,37,38,39,40,48,56}, {0,8,16,24,32,41,42,43,44,45,46,47,48,56}, {0,8,16,24,32,40,49,50,51,52,53,54,55,56}, {0,8,16,24,32,40,48,57,58,59,60,61,62,63}, {0,2,3,4,5,6,7,9,17,25,33,41,49,57}, {1,8,10,11,12,13,14,15,17,25,33,41,49,57}, {1,9,16,18,19,20,21,22,23,25,33,41,49,57}, {1,9,17,24,26,27,28,29,30,31,33,41,49,57}, {1,9,17,25,32,34,35,36,37,38,39,41,49,57}, {1,9,17,25,33,40,42,43,44,45,46,47,49,57}, {1,9,17,25,33,41,48,50,51,52,53,54,55,57}, {1,9,17,25,33,41,49,56,58,59,60,61,62,63}, {0,1,3,4,5,6,7,10,18,26,34,42,50,58}, {2,8,9,11,12,13,14,15,18,26,34,42,50,58}, {2,10,16,17,19,20,21,22,23,26,34,42,50,58}, {2,10,18,24,25,27,28,29,30,31,34,42,50,58}, {2,10,18,26,32,33,35,36,37,38,39,42,50,58}, {2,10,18,26,34,40,41,43,44,45,46,47,50,58}, {2,10,18,26,34,42,48,49,51,52,53,54,55,58}, {2,10,18,26,34,42,50,56,57,59,60,61,62,63}, {0,1,2,4,5,6,7,11,19,27,35,43,51,59}, {3,8,9,10,12,13,14,15,19,27,35,43,51,59}, {3,11,16,17,18,20,21,22,23,27,35,43,51,59}, {3,11,19,24,25,26,28,29,30,31,35,43,51,59}, {3,11,19,27,32,33,34,36,37,38,39,43,51,59}, {3,11,19,27,35,40,41,42,44,45,46,47,51,59}, {3,11,19,27,35,43,48,49,50,52,53,54,55,59}, {3,11,19,27,35,43,51,56,57,58,60,61,62,63}, {0,1,2,3,5,6,7,12,20,28,36,44,52,60}, {4,8,9,10,11,13,14,15,20,28,36,44,52,60}, {4,12,16,17,18,19,21,22,23,28,36,44,52,60}, {4,12,20,24,25,26,27,29,30,31,36,44,52,60}, {4,12,20,28,32,33,34,35,37,38,39,44,52,60}, {4,12,20,28,36,40,41,42,43,45,46,47,52,60}, {4,12,20,28,36,44,48,49,50,51,53,54,55,60}, {4,12,20,28,36,44,52,56,57,58,59,61,62,63}, {0,1,2,3,4,6,7,13,21,29,37,45,53,61}, {5,8,9,10,11,12,14,15,21,29,37,45,53,61}, {5,13,16,17,18,19,20,22,23,29,37,45,53,61}, {5,13,21,24,25,26,27,28,30,31,37,45,53,61}, {5,13,21,29,32,33,34,35,36,38,39,45,53,61}, {5,13,21,29,37,40,41,42,43,44,46,47,53,61}, {5,13,21,29,37,45,48,49,50,51,52,54,55,61}, {5,13,21,29,37,45,53,56,57,58,59,60,62,63}, {0,1,2,3,4,5,7,14,22,30,38,46,54,62}, {6,8,9,10,11,12,13,15,22,30,38,46,54,62}, {6,14,16,17,18,19,20,21,23,30,38,46,54,62}, {6,14,22,24,25,26,27,28,29,31,38,46,54,62}, {6,14,22,30,32,33,34,35,36,37,39,46,54,62}, {6,14,22,30,38,40,41,42,43,44,45,47,54,62}, {6,14,22,30,38,46,48,49,50,51,52,53,55,62}, {6,14,22,30,38,46,54,56,57,58,59,60,61,63}, {0,1,2,3,4,5,6,15,23,31,39,47,55,63}, {7,8,9,10,11,12,13,14,23,31,39,47,55,63}, {7,15,16,17,18,19,20,21,22,31,39,47,55,63}, {7,15,23,24,25,26,27,28,29,30,39,47,55,63}, {7,15,23,31,32,33,34,35,36,37,38,47,55,63}, {7,15,23,31,39,40,41,42,43,44,45,46,55,63}, {7,15,23,31,39,47,48,49,50,51,52,53,54,63}, {7,15,23,31,39,47,55,56,57,58,59,60,61,62} };

const std::vector<std::vector<int>> QueenMoves = { {1,2,3,4,5,6,7,8,9,16,18,24,27,32,36,40,45,48,54,56}, {0,1,9,10,11,12,13,14,15,16,17,24,26,32,35,40,44,48,53,56,62}, {0,2,8,9,17,18,19,20,21,22,23,24,25,32,34,40,43,48,52,56,61}, {0,3,8,10,16,17,25,26,27,28,29,30,31,32,33,40,42,48,51,56,60}, {0,4,8,11,16,18,24,25,33,34,35,36,37,38,39,40,41,48,50,56,59}, {0,5,8,12,16,19,24,26,32,33,41,42,43,44,45,46,47,48,49,56,58}, {0,6,8,13,16,20,24,27,32,34,40,41,49,50,51,52,53,54,55,56,57}, {0,8,14,16,21,24,28,32,35,40,42,48,49,57,58,59,60,61,62,63}, {0,2,3,4,5,6,7,8,9,10,17,19,25,28,33,37,41,46,49,55,57}, {0,1,2,8,10,11,12,13,14,15,16,17,18,25,27,33,36,41,45,49,54,57,63}, {1,3,8,9,10,16,18,19,20,21,22,23,24,25,26,33,35,41,44,49,53,57,62}, {1,4,9,11,16,17,18,24,26,27,28,29,30,31,32,33,34,41,43,49,52,57,61}, {1,5,9,12,17,19,24,25,26,32,34,35,36,37,38,39,40,41,42,49,51,57,60}, {1,6,9,13,17,20,25,27,32,33,34,40,42,43,44,45,46,47,48,49,50,57,59}, {1,7,9,14,17,21,25,28,33,35,40,41,42,48,50,51,52,53,54,55,56,57,58}, {1,9,15,17,22,25,29,33,36,41,43,48,49,50,56,58,59,60,61,62,63}, {0,1,3,4,5,6,7,9,10,11,16,18,20,26,29,34,38,42,47,50,58}, {1,2,3,8,9,11,12,13,14,15,17,18,19,24,26,28,34,37,42,46,50,55,58}, {0,2,4,9,10,11,16,17,19,20,21,22,23,25,26,27,32,34,36,42,45,50,54,58,63}, {2,5,8,10,12,17,18,19,24,25,27,28,29,30,31,33,34,35,40,42,44,50,53,58,62}, {2,6,10,13,16,18,20,25,26,27,32,33,35,36,37,38,39,41,42,43,48,50,52,58,61}, {2,7,10,14,18,21,24,26,28,33,34,35,40,41,43,44,45,46,47,49,50,51,56,58,60}, {2,10,15,18,22,26,29,32,34,36,41,42,43,48,49,51,52,53,54,55,57,58,59}, {2,10,18,23,26,30,34,37,40,42,44,49,50,51,56,57,59,60,61,62,63}, {0,1,2,4,5,6,7,10,11,12,17,19,21,24,27,30,35,39,43,51,59}, {2,3,4,8,9,10,12,13,14,15,18,19,20,25,27,29,32,35,38,43,47,51,59}, {1,3,5,10,11,12,16,17,18,20,21,22,23,26,27,28,33,35,37,40,43,46,51,55,59}, {0,3,6,9,11,13,18,19,20,24,25,26,28,29,30,31,34,35,36,41,43,45,48,51,54,59,63}, {3,7,8,11,14,17,19,21,26,27,28,32,33,34,36,37,38,39,42,43,44,49,51,53,56,59,62}, {3,11,15,16,19,22,25,27,29,34,35,36,40,41,42,44,45,46,47,50,51,52,57,59,61}, {3,11,19,23,24,27,30,33,35,37,42,43,44,48,49,50,52,53,54,55,58,59,60}, {3,11,19,27,31,32,35,38,41,43,45,50,51,52,56,57,58,60,61,62,63}, {0,1,2,3,5,6,7,11,12,13,18,20,22,25,28,31,32,36,44,52,60}, {3,4,5,8,9,10,11,13,14,15,19,20,21,26,28,30,33,36,39,40,44,52,60}, {2,4,6,11,12,13,16,17,18,19,21,22,23,27,28,29,34,36,38,41,44,47,48,52,60}, {1,4,7,10,12,14,19,20,21,24,25,26,27,29,30,31,35,36,37,42,44,46,49,52,55,56,60}, {0,4,9,12,15,18,20,22,27,28,29,32,33,34,35,37,38,39,43,44,45,50,52,54,57,60,63}, {4,8,12,17,20,23,26,28,30,35,36,37,40,41,42,43,45,46,47,51,52,53,58,60,62}, {4,12,16,20,25,28,31,34,36,38,43,44,45,48,49,50,51,53,54,55,59,60,61}, {4,12,20,24,28,33,36,39,42,44,46,51,52,53,56,57,58,59,61,62,63}, {0,1,2,3,4,6,7,12,13,14,19,21,23,26,29,33,37,40,45,53,61}, {4,5,6,8,9,10,11,12,14,15,20,21,22,27,29,31,34,37,41,45,48,53,61}, {3,5,7,12,13,14,16,17,18,19,20,22,23,28,29,30,35,37,39,42,45,49,53,56,61}, {2,5,11,13,15,20,21,22,24,25,26,27,28,30,31,36,37,38,43,45,47,50,53,57,61}, {1,5,10,13,19,21,23,28,29,30,32,33,34,35,36,38,39,44,45,46,51,53,55,58,61}, {0,5,9,13,18,21,27,29,31,36,37,38,40,41,42,43,44,46,47,52,53,54,59,61,63}, {5,8,13,17,21,26,29,35,37,39,44,45,46,48,49,50,51,52,54,55,60,61,62}, {5,13,16,21,25,29,34,37,43,45,47,52,53,54,56,57,58,59,60,62,63}, {0,1,2,3,4,5,7,13,14,15,20,22,27,30,34,38,41,46,48,54,62}, {5,6,7,8,9,10,11,12,13,15,21,22,23,28,30,35,38,42,46,49,54,56,62}, {4,6,13,14,15,16,17,18,19,20,21,23,29,30,31,36,38,43,46,50,54,57,62}, {3,6,12,14,21,22,23,24,25,26,27,28,29,31,37,38,39,44,46,51,54,58,62}, {2,6,11,14,20,22,29,30,31,32,33,34,35,36,37,39,45,46,47,52,54,59,62}, {1,6,10,14,19,22,28,30,37,38,39,40,41,42,43,44,45,47,53,54,55,60,62}, {0,6,9,14,18,22,27,30,36,38,45,46,47,48,49,50,51,52,53,55,61,62,63}, {6,8,14,17,22,26,30,35,38,44,46,53,54,55,56,57,58,59,60,61,63}, {0,1,2,3,4,5,6,14,15,21,23,28,31,35,39,42,47,49,55,63}, {6,7,8,9,10,11,12,13,14,22,23,29,31,36,39,43,47,50,55,57,63}, {5,7,14,15,16,17,18,19,20,21,22,30,31,37,39,44,47,51,55,58,63}, {4,7,13,15,22,23,24,25,26,27,28,29,30,38,39,45,47,52,55,59,63}, {3,7,12,15,21,23,30,31,32,33,34,35,36,37,38,46,47,53,55,60,63}, {2,7,11,15,20,23,29,31,38,39,40,41,42,43,44,45,46,54,55,61,63}, {1,7,10,15,19,23,28,31,37,39,46,47,48,49,50,51,52,53,54,62,63}, {7,9,15,18,23,27,31,36,39,45,47,54,55,56,57,58,59,60,61,62} };

const std::vector<std::vector<int>> KingMoves = { {1,8,9}, {0,2,8,9,10}, {1,3,9,10,11}, {2,4,10,11,12}, {3,5,11,12,13}, {4,6,12,13,14}, {5,7,13,14,15}, {6,14,15}, {0,1,9,16,17}, {0,1,2,8,10,16,17,18}, {1,2,3,9,11,17,18,19}, {2,3,4,10,12,18,19,20}, {3,4,5,11,13,19,20,21}, {4,5,6,12,14,20,21,22}, {5,6,7,13,15,21,22,23}, {6,7,14,22,23}, {8,9,17,24,25}, {8,9,10,16,18,24,25,26}, {9,10,11,17,19,25,26,27}, {10,11,12,18,20,26,27,28}, {11,12,13,19,21,27,28,29}, {12,13,14,20,22,28,29,30}, {13,14,15,21,23,29,30,31}, {14,15,22,30,31}, {16,17,25,32,33}, {16,17,18,24,26,32,33,34}, {17,18,19,25,27,33,34,35}, {18,19,20,26,28,34,35,36}, {19,20,21,27,29,35,36,37}, {20,21,22,28,30,36,37,38}, {21,22,23,29,31,37,38,39}, {22,23,30,38,39}, {24,25,33,40,41}, {24,25,26,32,34,40,41,42}, {25,26,27,33,35,41,42,43}, {26,27,28,34,36,42,43,44}, {27,28,29,35,37,43,44,45}, {28,29,30,36,38,44,45,46}, {29,30,31,37,39,45,46,47}, {30,31,38,46,47}, {32,33,41,48,49}, {32,33,34,40,42,48,49,50}, {33,34,35,41,43,49,50,51}, {34,35,36,42,44,50,51,52}, {35,36,37,43,45,51,52,53}, {36,37,38,44,46,52,53,54}, {37,38,39,45,47,53,54,55}, {38,39,46,54,55}, {40,41,49,56,57}, {40,41,42,48,50,56,57,58}, {41,42,43,49,51,57,58,59}, {42,43,44,50,52,58,59,60}, {43,44,45,51,53,59,60,61}, {44,45,46,52,54,60,61,62}, {45,46,47,53,55,61,62,63}, {46,47,54,62,63}, {48,49,57}, {48,49,50,56,58}, {49,50,51,57,59}, {50,51,52,58,60}, {51,52,53,59,61}, {52,53,54,60,62}, {53,54,55,61,63}, {54,55,62} };